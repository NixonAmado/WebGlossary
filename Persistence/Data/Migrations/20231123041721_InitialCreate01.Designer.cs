// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(DbAppContext))]
    [Migration("20231123041721_InitialCreate01")]
    partial class InitialCreate01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("Domain.Entities.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Phase1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Phase");

                    b.Property<int>("PhaseStructureId")
                        .HasColumnType("int")
                        .HasColumnName("PhaseStructure_id");

                    b.Property<int>("PhaseTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PhaseType_id");

                    b.Property<int>("PhaseVerbalTenseId")
                        .HasColumnType("int")
                        .HasColumnName("PhaseVerbalTense_id");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PhaseTypeId" }, "PhaseType_id_idx");

                    b.HasIndex(new[] { "PhaseStructureId" }, "phaseStructure_id_idx");

                    b.ToTable("phase", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phasestructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("phasestructure", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phasetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("phasetype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phaseverbaltense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Phaseverbaltense", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("DateTime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("User_id");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("User_email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("email");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("user_name");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Role_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Role_id", "User_id");

                    b.HasIndex("User_id");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Verbaltense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("verbaltense", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("Plural")
                        .HasColumnType("tinyint");

                    b.Property<string>("Translation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VerbalTenseId")
                        .HasColumnType("int")
                        .HasColumnName("VerbalTense_id");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("wordText");

                    b.Property<int>("WordTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WordType_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VerbalTenseId" }, "VerbalTense_id_idx");

                    b.ToTable("word", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Wordtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("wordtype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phase", b =>
                {
                    b.HasOne("Domain.Entities.Phasestructure", "PhaseStructure")
                        .WithMany("Phases")
                        .HasForeignKey("PhaseStructureId")
                        .IsRequired()
                        .HasConstraintName("PhaseStructure_id");

                    b.HasOne("Domain.Entities.Phaseverbaltense", "PhaseStructureNavigation")
                        .WithMany("Phases")
                        .HasForeignKey("PhaseStructureId")
                        .IsRequired()
                        .HasConstraintName("PhaseVerbalTense_id");

                    b.HasOne("Domain.Entities.Phasetype", "PhaseType")
                        .WithMany("Phases")
                        .HasForeignKey("PhaseTypeId")
                        .IsRequired()
                        .HasConstraintName("PhaseType_id");

                    b.Navigation("PhaseStructure");

                    b.Navigation("PhaseStructureNavigation");

                    b.Navigation("PhaseType");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "UserNavigation")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "RoleNavigation")
                        .WithMany("UsersRoles")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UserNavigation")
                        .WithMany("UsersRoles")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Word", b =>
                {
                    b.HasOne("Domain.Entities.Verbaltense", "VerbalTense")
                        .WithMany("Words")
                        .HasForeignKey("VerbalTenseId")
                        .IsRequired()
                        .HasConstraintName("VerbalTense_id");

                    b.HasOne("Domain.Entities.Wordtype", "VerbalTenseNavigation")
                        .WithMany("Words")
                        .HasForeignKey("VerbalTenseId")
                        .IsRequired()
                        .HasConstraintName("WordType_id");

                    b.Navigation("VerbalTense");

                    b.Navigation("VerbalTenseNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Phasestructure", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("Domain.Entities.Phasetype", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("Domain.Entities.Phaseverbaltense", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Verbaltense", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Domain.Entities.Wordtype", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
